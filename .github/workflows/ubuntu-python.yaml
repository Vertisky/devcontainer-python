# generate a github action to build ubuntu docker image
# and push to etma/devcontainer
name: Ubuntu-python
on:
  schedule:
    - cron: '1 0 * * *'
  push:
    paths:
      - .github/workflows/ubuntu-python.yaml
      - containers/ubuntu.Dockerfile
      - .dockerignore
      - containers/shell/**
  pull_request:
    paths:
      - .github/workflows/ubuntu-python.yaml
      - containers/ubuntu.Dockerfile
      - .dockerignore
      - containers/shell/**
jobs:
  gather:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.get-python-versions.outputs.python-versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Get python versions
        id: get-python-versions
        run: |
          vercomp () {
              if [[ $1 == $2 ]]
              then
                  return 0
              fi
              local IFS=.
              local i ver1=($1) ver2=($2)
              # fill empty fields in ver1 with zeros
              for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
              do
                  ver1[i]=0
              done
              for ((i=0; i<${#ver1[@]}; i++))
              do
                  if [[ -z ${ver2[i]} ]]
              then
              # fill empty fields in ver2 with zeros
              ver2[i]=0
              fi
              if ((10#${ver1[i]} > 10#${ver2[i]}))
              then
                  return 1
              fi
              if ((10#${ver1[i]} < 10#${ver2[i]}))
              then
                  return 2
              fi
              done
              return 0
          }

          testvercomp () {
              vercomp $1 $2
              case $? in
              0) op='=';;
              1) op='>';;
              2) op='<';;
              esac
              if [[ $op != $3 ]]
              then
                  echo "FAIL: Expected '$3', Actual '$op', Arg1 '$1', Arg2 '$2'"
                  return 1
              else
                  echo "Pass: '$1 $op $2'"
                  return 0
              fi
          }
          versions=()
          for line in $(docker run continuumio/anaconda3 conda search python | grep -v Name | grep -v '^$' | grep -v 'channels:' | awk '{print $2}' | sort -V | uniq); do
            if testvercomp $line 3.9 '>'; then
              versions+=($line)
            fi
          done
          echo "python-versions=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${versions[@]}")" >> $GITHUB_OUTPUT

  latest:
    runs-on: ubuntu-latest
    needs: ['gather']
    if: github.event_name == 'push'
    permissions:
      packages: write
    steps:
      - name: Check disk space
        run: df . -h
      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"
      - name: Check disk space
        run: |
          sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
          df . -h
          sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check working space directory
        run: du ${GITHUB_WORKSPACE} -h -d 1
      - name: Get more space
        run: |
          df . -h
          sudo rm -rf ${GITHUB_WORKSPACE}/.git
          df . -h
      
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: set variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          TAG=${GITHUB_REF#refs/tags/}
          echo commit=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
          echo created=$(date -u +%Y-%m-%dT%H:%M:%SZ) >> $GITHUB_OUTPUT
          if [ "$TAG" != "$GITHUB_REF" ]; then
            echo version=ubuntu-latest-$TAG >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu-$TAG >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "main" ]; then
            echo version=ubuntu-latest >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          else
            echo version=ubuntu-latest-$BRANCH >> $GITHUB_OUTPUT
            echo ubuntu_version=ubuntu-$BRANCH >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=false >> $GITHUB_OUTPUT
          fi

      - name: Build and push final image
        uses: docker/build-push-action@v3
        if: ${{ steps.vars.outputs.main }}
        with:
          context: .
          file: ./containers/ubuntu.Dockerfile
          platforms: ${{ steps.vars.outputs.platforms }}
          push: true
          build-args: |
            CREATED=${{ steps.vars.outputs.created }}
            REVISION=${{ steps.vars.outputs.commit }}
            VERSION=${{ steps.vars.outputs.version }}
            PYTHON_VERSION=3.12
          tags: |
            etma/devcontainer-python:${{ steps.vars.outputs.version }}
            etma/devcontainer-python:${{ steps.vars.outputs.ubuntu_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

  publish:
    runs-on: ubuntu-latest
    needs: ['gather']
    if: github.event_name == 'push'
    permissions:
      packages: write
    strategy:
      max-parallel: 3
      matrix:
        python-version: ${{ fromJson(needs.gather.outputs.python-versions) }}
    steps:
      - name: Check disk space
        run: df . -h
      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"
      - name: Check disk space
        run: |
          sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
          df . -h
          sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check working space directory
        run: du ${GITHUB_WORKSPACE} -h -d 1
      - name: Get more space
        run: |
          df . -h
          sudo rm -rf ${GITHUB_WORKSPACE}/.git
          df . -h
      
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: set variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          TAG=${GITHUB_REF#refs/tags/}
          echo commit=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
          echo created=$(date -u +%Y-%m-%dT%H:%M:%SZ) >> $GITHUB_OUTPUT
          if [ "$TAG" != "$GITHUB_REF" ]; then
            echo version=${{ matrix.python-version }}-$TAG >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.python-version }}-ubuntu-$TAG >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "main" ]; then
            echo version=${{ matrix.python-version }}-ubuntu-latest >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.python-version }}-ubuntu >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          else
            echo version=${{ matrix.python-version }}-$BRANCH >> $GITHUB_OUTPUT
            echo ubuntu_version=${{ matrix.python-version }}-ubuntu-$BRANCH >> $GITHUB_OUTPUT
            echo platforms=linux/amd64,linux/arm64 >> $GITHUB_OUTPUT
            echo main=false >> $GITHUB_OUTPUT
          fi

      - name: Build and push final image
        uses: docker/build-push-action@v3
        if: ${{ steps.vars.outputs.main }}
        with:
          context: .
          file: ./containers/ubuntu.Dockerfile
          platforms: ${{ steps.vars.outputs.platforms }}
          push: true
          build-args: |
            CREATED=${{ steps.vars.outputs.created }}
            REVISION=${{ steps.vars.outputs.commit }}
            VERSION=${{ steps.vars.outputs.version }}
            PYTHON_VERSION=${{ matrix.python-version }}
          tags: |
            etma/devcontainer-python:${{ steps.vars.outputs.version }}
            etma/devcontainer-python:${{ steps.vars.outputs.ubuntu_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
