# generate a github action to build alpine docker image
# and push to etma/devcontainer
name: Alpine-Golang
on:
  push:
    paths:
      - .github/workflows/alpine-golang.yaml
      - containers/alpine.Dockerfile
      - containers/base/alpine.Dockerfile
      - .dockerignore
      - containers/shell/**
  pull_request:
    paths:
      - .github/workflows/alpine-golang.yaml
      - containers/alpine.Dockerfile
      - containers/base/alpine.Dockerfile
      - .dockerignore
      - containers/shell/**

jobs:
  verify:
    runs-on: devcontainer-python-arc-set
    steps:
      - uses: actions/checkout@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Alpine
        run: docker build --build-arg GO_VERSIONS=latest -t etma/devcontainer:golang-alpine -f ./containers/alpine.Dockerfile .

  publish:
    runs-on: devcontainer-python-arc-set
    needs: ['verify']
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to dockerhub to avoid rate limits
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: set variables
        id: vars
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          TAG=${GITHUB_REF#refs/tags/}
          echo commit=$(git rev-parse --short HEAD) >> $GITHUB_OUTPUT
          echo created=$(date -u +%Y-%m-%dT%H:%M:%SZ) >> $GITHUB_OUTPUT
          echo go_versions="1.18.9,1.19.3,1.19.4,1.19.5" >> $GITHUB_OUTPUT
          if [ "$TAG" != "$GITHUB_REF" ]; then
            echo version=golang-$TAG >> $GITHUB_OUTPUT
            echo alpine_version=golang-alpine-$TAG >> $GITHUB_OUTPUT
            echo platforms=linux/amd64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "main" ]; then
            echo version=golang-alpine-latest >> $GITHUB_OUTPUT
            echo alpine_version=golang-alpine >> $GITHUB_OUTPUT
            echo platforms=linux/amd64 >> $GITHUB_OUTPUT
            echo main=true >> $GITHUB_OUTPUT
          else
            echo version=golang-$BRANCH >> $GITHUB_OUTPUT
            echo alpine_version=golang-alpine-$BRANCH >> $GITHUB_OUTPUT
            echo platforms=linux/amd64 >> $GITHUB_OUTPUT
            echo main=false >> $GITHUB_OUTPUT
          fi

      - name: Build and push final image
        uses: docker/build-push-action@v3
        if: ${{ steps.vars.outputs.main }}
        with:
          context: .
          file: ./containers/alpine.Dockerfile
          platforms: ${{ steps.vars.outputs.platforms }}
          push: true
          build-args: |
            CREATED=${{ steps.vars.outputs.created }}
            REVISION=${{ steps.vars.outputs.commit }}
            VERSION=${{ steps.vars.outputs.version }}
            GO_VERSIONS=${{ steps.vars.outputs.go_versions }}
          tags: |
            etma/devcontainer:golang
            etma/devcontainer:${{ steps.vars.outputs.version }}
            etma/devcontainer:${{ steps.vars.outputs.alpine_version }}
